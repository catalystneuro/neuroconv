"""Authors: Cody Baker and Ben Dichter."""
from abc import abstractmethod, ABC
import uuid
from typing import Optional
from datetime import datetime
from warnings import warn

from pynwb import NWBFile
from pandas import Timedelta

from .utils import get_base_schema, get_schema_from_method_signature


class BaseDataInterface(ABC):
    """Abstract class defining the structure of all DataInterfaces."""

    @classmethod
    def get_source_schema(cls):
        """Infer the JSON schema for the source_data from the method signature (annotation typing)."""
        return get_schema_from_method_signature(cls.__init__, exclude=["source_data"])

    @classmethod
    def get_conversion_options_schema(cls):
        """Infer the JSON schema for the conversion options from the method signature (annotation typing)."""
        return get_schema_from_method_signature(cls.run_conversion, exclude=["nwbfile", "metadata"])

    def __init__(self, **source_data):
        self.source_data = source_data

        # Time-related attributes
        self._start_time: Optional[datetime] = None
        self._relative_start_time: Optional[Timedelta] = None
        self._rate: Optional[float] = None
        # self._times: Optional[ArrayType] = None  # TODO: generalize to vector of timestamps

    def set_start_time(self, timestamp: datetime):
        """Set a timestamp as a datetime object to indicate the exact start time of the series in the DataInterface."""
        self._start_time = timestamp

    def get_start_time(self) -> Optional[datetime]:
        """Retrieve the timestamp which indicates the exact start time of the series in the DataInterface."""
        return self._start_time

    def set_relative_start_time(self, time_delta: Timedelta):
        """Set a Timedelta object to indicate the relative start time of the series in the DataInterface."""
        self._relative_start_time = time_delta

    def get_relative_start_time(self) -> Optional[Timedelta]:
        """Retrieve a Timedelta object to indicate the relative start time of the series in the DataInterface."""
        return self._relative_start_time

    def set_rate(self, rate: float):
        """Set the average sampling rate of the series in the DataInterface."""
        self._rate = rate

    def get_rate(self) -> Optional[float]:
        """Retrieve the average sampling rate of the series in the DataInterface."""
        return self._rate

    def get_metadata_schema(self):
        """Retrieve JSON schema for metadata."""
        metadata_schema = get_base_schema(
            id_="metadata.schema.json",
            root=True,
            title="Metadata",
            description="Schema for the metadata",
            version="0.1.0",
        )
        return metadata_schema

    def get_metadata(self):
        """Child DataInterface classes should override this to match their metadata."""
        metadata = dict(
            NWBFile=dict(
                session_description="Auto-generated by NeuroConv",
                identifier=str(uuid.uuid4()),
            ),
        )

        return metadata

    def align_to_session_start_time(self, session_start_time: Optional[datetime] = None):
        """
        Align the time references of the series in the DataInterface to the session start time.

        When writing a fresh NWB file from a stand-alone interface (no NWBConverter) this is very straightforward,
        since the relative start time is just zero.

        TODO: When writing in append mode to an existing file, care must be taken to properly align to the previously
        determined start time.

        Parameters
        ----------
        session_start_time: datetime, optional
            Specify an external session start time to align this interfaces relative time references to.
            Default behavior is to use this interfaces start time.
        """
        interface_start_time = self.get_start_time()
        session_start_time = session_start_time or interface_start_time
        assert session_start_time is not None, "Unable to synchronize - no session start time is set!"

        time_delta = Timedelta(session_start_time - interface_start_time)
        if time_delta < Timedelta(0):
            warn(
                "The synchronized relative start time is negative! "
                "Consider setting the session start time to the earliest timestamp expected for the session."
            )
        self.set_relative_start_time(time_delta=time_delta)

    def get_conversion_options(self):
        """Child DataInterface classes should override this to match their conversion options."""
        return dict()

    @abstractmethod
    def run_conversion(
        self,
        nwbfile_path: Optional[str] = None,
        nwbfile: Optional[NWBFile] = None,
        metadata: Optional[dict] = None,
        overwrite: bool = False,
        **conversion_options,
    ):
        """
        Run the NWB conversion for the instantiated data interface.

        Parameters
        ----------
        nwbfile_path: FilePathType
            Path for where to write or load (if overwrite=False) the NWBFile.
            If specified, the context will always write to this location.
        nwbfile: NWBFile, optional
            An in-memory NWBFile object to write to the location.
        metadata: dict, optional
            Metadata dictionary with information used to create the NWBFile when one does not exist or overwrite=True.
        overwrite: bool, optional
            Whether or not to overwrite the NWBFile if one exists at the nwbfile_path.
            The default is False (append mode).
        verbose: bool, optional
            If 'nwbfile_path' is specified, informs user after a successful write operation.
            The default is True.
        """
        raise NotImplementedError("The run_conversion method for this DataInterface has not been defined!")
