name: Formatwise gallery tests
on:
  schedule:
    - cron: "0 16 * * 1"  # Every Monday at noon EST
  workflow_dispatch:

jobs:
  load_python_and_os_versions:
    runs-on: ubuntu-latest
    outputs:
      ALL_PYTHON_VERSIONS: ${{ steps.load_python_versions.outputs.python_versions }}
      ALL_OS_VERSIONS: ${{ steps.load_os_versions.outputs.os_versions }}
    steps:
      - uses: actions/checkout@v4
      - id: load_python_versions
        run: echo "python_versions=$(cat ./.github/workflows/all_python_versions.txt)" >> "$GITHUB_OUTPUT"
      - id: load_os_versions
        run: echo "os_versions=$(cat ./.github/workflows/all_os_versions.txt)" >> "$GITHUB_OUTPUT"
      - name: Debugging
        run: |
          echo "Loaded Python versions: ${{ steps.load_python_versions.outputs.python_versions }}"
          echo "Loaded OS versions: ${{ steps.load_os_versions.outputs.os_versions }}"

  run:
    needs: load_python_and_os_versions
    name: Format tests on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.load_python_and_os_versions.outputs.ALL_PYTHON_VERSIONS) }}
        os: ${{ fromJson(needs.load_python_and_os_versions.outputs.ALL_OS_VERSIONS) }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Global Setup
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade virtualenv

      - name: Prepare data for tests
        uses: ./.github/actions/load-data
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          s3-gin-bucket: ${{ secrets.S3_GIN_BUCKET }}
          os: ${{ matrix.os }}

      # Discover formats dynamically from conversion gallery
      # This automatically finds all .rst files in docs/conversion_examples_gallery/
      # and creates format strings in the format "category:format_name"
      - name: Discover formats from gallery
        id: collect_gallery_formats
        shell: bash
        run: |
          chmod +x .github/scripts/collect_gallery_formats.py
          FORMATS_JSON=$(python .github/scripts/collect_gallery_formats.py)
          echo "formats_json=$FORMATS_JSON" >> $GITHUB_OUTPUT
          echo "Discovered $(echo "$FORMATS_JSON" | jq length) formats"
          echo "Formats: $FORMATS_JSON"

      # Run all format tests in sequence
      - name: Run all format tests in sequence
        shell: bash
        run: |
          # Get formats from discovery step and convert to bash array
          # Using while loop for macOS compatibility (readarray not available in older bash)
          FORMATS_JSON='${{ steps.collect_gallery_formats.outputs.formats_json }}'
          FORMATS=()
          while IFS= read -r format; do
            FORMATS+=("$format")
          done < <(echo "$FORMATS_JSON" | jq -r '.[]')

          echo "Testing ${#FORMATS[@]} formats:"
          printf '%s\n' "${FORMATS[@]}"
          echo ""

          # Track overall success
          OVERALL_SUCCESS=true
          FAILED_FORMATS=()

          # Loop through each format
          for format in "${FORMATS[@]}"; do
            # Split type and name, and trim any whitespace/carriage returns
            IFS=':' read -r type name <<< "$format"
            # Remove any trailing whitespace or carriage returns (Windows compatibility)
            type=$(echo "$type" | tr -d '\r\n' | xargs)
            name=$(echo "$name" | tr -d '\r\n' | xargs)

            echo "===================================================="
            echo "Testing $type:$name"
            echo "===================================================="

            # Create fresh virtual environment
            python -m virtualenv clean_env_$name

            # Activate environment
            if [ "${{ runner.os }}" == "Windows" ]; then
              source clean_env_$name/Scripts/activate
            else
              source clean_env_$name/bin/activate
            fi

            # Install dependencies
            pip install ".[test,$name]"

            # Check if the gallery file exists before running pytest
            gallery_file="docs/conversion_examples_gallery/$type/$name.rst"
            if [ ! -f "$gallery_file" ]; then
              echo "❌ Gallery file not found: $gallery_file"
              OVERALL_SUCCESS=false
              FAILED_FORMATS+=("$type:$name (file not found)")
            else
              # Run test
              if pytest --doctest-glob="*.rst" "$gallery_file"; then
                echo "✅ $type:$name test passed"
              else
                echo "❌ $type:$name test failed"
                OVERALL_SUCCESS=false
                FAILED_FORMATS+=("$type:$name")
              fi
            fi

            # Deactivate environment
            deactivate

            # Remove environment to save space
            rm -rf clean_env_$name

            echo ""
          done

          # Report results
          echo "===================================================="
          if [ "$OVERALL_SUCCESS" = true ]; then
            echo "✅ All format tests passed!"
          else
            echo "❌ Some format tests failed:"
            for failed in "${FAILED_FORMATS[@]}"; do
              echo "   - $failed"
            done
            exit 1
          fi
