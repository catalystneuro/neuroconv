name: Formatwise gallery tests
on:
  schedule:
    - cron: "0 16 * * 1"  # Every Monday at noon EST
  workflow_dispatch:
  # Add trigger for workflow_call to be used by auto-publish
  workflow_call:
    inputs:
      python-versions:
        description: 'List of Python versions to use in matrix, as JSON string'
        required: false
        type: string
      os-versions:
        description: 'List of OS versions to use in matrix, as JSON string'
        required: false
        type: string

jobs:
  load_python_and_os_versions:
    runs-on: ubuntu-latest
    outputs:
      ALL_PYTHON_VERSIONS: ${{ steps.load_python_versions.outputs.python_versions }}
      ALL_OS_VERSIONS: ${{ steps.load_os_versions.outputs.os_versions }}
    steps:
      - uses: actions/checkout@v4
      - id: load_python_versions
        run: echo "python_versions=$(cat ./.github/workflows/all_python_versions.txt)" >> "$GITHUB_OUTPUT"
      - id: load_os_versions
        run: echo "os_versions=$(cat ./.github/workflows/all_os_versions.txt)" >> "$GITHUB_OUTPUT"
      - name: Debugging
        run: |
          echo "Loaded Python versions: ${{ steps.load_python_versions.outputs.python_versions }}"
          echo "Loaded OS versions: ${{ steps.load_os_versions.outputs.os_versions }}"

  run:
    needs: load_python_and_os_versions
    name: Format tests on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(inputs.python-versions || needs.load_python_and_os_versions.outputs.ALL_PYTHON_VERSIONS) }}
        os: ${{ fromJson(inputs.os-versions || needs.load_python_and_os_versions.outputs.ALL_OS_VERSIONS) }}
    steps:
      - uses: actions/checkout@v4
      - run: git fetch --prune --unshallow --tags
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Global Setup
        run: |
          python -m pip install --upgrade pip
          git config --global user.email "CI@example.com"
          git config --global user.name "CI Almighty"

      # Only rely on caches in matrix - absolutely no S3 transfer in a matrix this large.
      - name: Get ephy_testing_data current head hash
        id: ephys
        run: echo "HASH_EPHY_DATASET=$(git ls-remote https://gin.g-node.org/NeuralEnsemble/ephy_testing_data.git HEAD | cut -f1)" >> $GITHUB_OUTPUT
      - name: Cache ephys dataset - ${{ steps.ephys.outputs.HASH_EPHY_DATASET }}
        uses: actions/cache@v4
        id: cache-ephys-datasets
        with:
          path: ./ephy_testing_data
          key: ephys-datasets-2024-08-30-${{ matrix.os }}-${{ steps.ephys.outputs.HASH_EPHY_DATASET }}
      - name: Get ophys_testing_data current head hash
        id: ophys
        run: echo "HASH_OPHYS_DATASET=$(git ls-remote https://gin.g-node.org/CatalystNeuro/ophys_testing_data.git HEAD | cut -f1)" >> $GITHUB_OUTPUT
      - name: Cache ophys dataset - ${{ steps.ophys.outputs.HASH_OPHYS_DATASET }}
        uses: actions/cache@v4
        id: cache-ophys-datasets
        with:
          path: ./ophys_testing_data
          key: ophys-datasets-2022-08-18-${{ matrix.os }}-${{ steps.ophys.outputs.HASH_OPHYS_DATASET }}
      - name: Get behavior_testing_data current head hash
        id: behavior
        run: echo "HASH_BEHAVIOR_DATASET=$(git ls-remote https://gin.g-node.org/CatalystNeuro/behavior_testing_data.git HEAD | cut -f1)" >> $GITHUB_OUTPUT
      - name: Cache behavior dataset - ${{ steps.behavior.outputs.HASH_BEHAVIOR_DATASET }}
        uses: actions/cache@v4
        id: cache-behavior-datasets
        with:
          path: ./behavior_testing_data
          key: behavior-datasets-2022-08-18-${{ matrix.os }}-${{ steps.behavior.outputs.HASH_behavior_DATASET }}

      # Install virtualenv for creating clean environments
      - name: Install virtualenv
        run: python -m pip install --upgrade virtualenv

      # Run all format tests in sequence
      - name: Run all format tests in sequence
        shell: bash
        run: |
          # Define all formats to test
          FORMATS=(
            "recording:spikeglx"
            "recording:edf"
            "recording:intan"
            "recording:neuralynx"
            "recording:neuroscope"
            "recording:openephys"
            "sorting:cellexplorer"
            "sorting:neuralynx"
            "sorting:neuroscope"
            "imaging:scanimage"
            "imaging:tiff"
            "behavior:deeplabcut"
          )

          # Track overall success
          OVERALL_SUCCESS=true
          FAILED_FORMATS=()

          # Loop through each format
          for format in "${FORMATS[@]}"; do
            # Split type and name
            IFS=':' read -r type name <<< "$format"

            echo "===================================================="
            echo "Testing $type:$name"
            echo "===================================================="

            # Create fresh virtual environment
            python -m virtualenv clean_env_$name

            # Activate environment (OS-specific)
            if [ "${{ runner.os }}" == "Windows" ]; then
              source clean_env_$name/Scripts/activate
            else
              source clean_env_$name/bin/activate
            fi

            # Install dependencies
            pip install ".[test,$name]"

            # Run test
            if pytest --doctest-glob="*.rst" docs/conversion_examples_gallery/$type/$name.rst; then
              echo "✅ $type:$name test passed"
            else
              echo "❌ $type:$name test failed"
              OVERALL_SUCCESS=false
              FAILED_FORMATS+=("$type:$name")
            fi

            # Deactivate environment
            deactivate

            # Remove environment to save space
            rm -rf clean_env_$name

            echo ""
          done

          # Report results
          echo "===================================================="
          if [ "$OVERALL_SUCCESS" = true ]; then
            echo "✅ All format tests passed!"
          else
            echo "❌ Some format tests failed:"
            for failed in "${FAILED_FORMATS[@]}"; do
              echo "   - $failed"
            done
            exit 1
          fi
