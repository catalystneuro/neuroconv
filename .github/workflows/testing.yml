name: Minimal and Full Tests

on:
  workflow_call:
    inputs:
      python-versions:
        description: 'List of Python versions to use in matrix, as JSON string'
        required: true
        type: string
      os-versions:
        description: 'List of OS versions to use in matrix, as JSON string'
        required: true
        type: string

    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      S3_GIN_BUCKET:
        required: true
      CODECOV_TOKEN:
        required: true
  workflow_dispatch:

jobs:
  run:
    name: ${{ matrix.os }} Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(inputs.python-versions) }}
        os: ${{ fromJson(inputs.os-versions) }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Global Setup
        run: |
          python -m pip install -U pip  # Official recommended way

      - name: Install NeuroConv with minimal requirements
        run: python -m pip install "."
      - name: Test initial import of all non-lazy dependencies
        run: |  # This tests that everything can be imported without errors
          python -c "import neuroconv"
          python -c "import neuroconv.datainterfaces"
          python -c "import neuroconv.tools"
          python -c "import neuroconv.utils"
          python -c "import neuroconv.converters"


      - name: Install NeuroConv with testing requirements
        run: python -m pip install ".[test]"
      - name: Run import tests
        run: |
          pytest tests/imports.py::TestImportStructure::test_top_level
          pytest tests/imports.py::TestImportStructure::test_tools
          pytest tests/imports.py::TestImportStructure::test_datainterfaces

      - name: Run minimal tests
        run: pytest tests/test_minimal -vv -rsx -n auto --dist loadscope

      - name: Test ecephys machinery
        shell: bash
        run: |
          # Create ecephys environment
          python -m venv env_ecephys
          # Activate ecephys environment and install requirements
          if [ "${{ runner.os }}" == "Windows" ]; then
            . env_ecephys/Scripts/activate
          else
            source env_ecephys/bin/activate
          fi
          python -m pip install -U pip
          python -m pip install ".[test,ecephys_minimal,sorting_analyzer]"  # we test the sorting analyzer here so we need its dependencies
          python -m pytest tests/test_modalities/test_ecephys -vv -rsx -n auto --dist loadscope
          if [ "${{ runner.os }}" == "Windows" ]; then
            deactivate
          else
            deactivate
          fi

      - name: Test ophys machinery
        shell: bash
        run: |
          # Create ophys environment
          python -m venv env_ophys
          # Activate ophys environment and install requirements
          if [ "${{ runner.os }}" == "Windows" ]; then
            . env_ophys/Scripts/activate
          else
            source env_ophys/bin/activate
          fi
          python -m pip install -U pip
          python -m pip install ".[test,ophys_minimal]"
          python -m pytest tests/test_modalities/test_ophys -vv -rsx -n auto --dist loadscope
          if [ "${{ runner.os }}" == "Windows" ]; then
            deactivate
          else
            deactivate
          fi

      - name: Test fiber photometry machinery
        shell: bash
        run: |
          # Create fiber_photometry environment
          python -m venv env_fiber_photometry
          # Activate fiber_photometry environment and install requirements
          if [ "${{ runner.os }}" == "Windows" ]; then
            . env_fiber_photometry/Scripts/activate
          else
            source env_fiber_photometry/bin/activate
          fi
          python -m pip install -U pip
          python -m pip install ".[test,fiber_photometry]"
          python -m pytest tests/test_modalities/test_fiber_photometry -vv -rsx -n auto --dist loadscope
          if [ "${{ runner.os }}" == "Windows" ]; then
            deactivate
          else
            deactivate
          fi

      - name: Test behavior machinery
        shell: bash
        run: |
          # Create behavior environment
          python -m venv env_behavior
          # Activate behavior environment and install requirements
          if [ "${{ runner.os }}" == "Windows" ]; then
            . env_behavior/Scripts/activate
          else
            source env_behavior/bin/activate
          fi
          python -m pip install -U pip
          python -m pip install ".[test,behavior]"
          python -m pytest tests/test_modalities/test_behavior -vv -rsx -n auto --dist loadscope
          if [ "${{ runner.os }}" == "Windows" ]; then
            deactivate
          else
            deactivate
          fi

      - name: Prepare data for tests
        uses: ./.github/actions/load-data
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          s3-gin-bucket: ${{ secrets.S3_GIN_BUCKET }}

      - name: Install full requirements in base environment
        run: python -m pip install ".[full]"

      - name: Install Wine (For Plexon2 Data Tests)
        uses: ./.github/actions/install-wine
        with:
          os: ${{ runner.os }}

      - name: Run full pytest with coverage
        run: pytest -vv -rsx -n auto --dist loadscope --cov=neuroconv --cov-report xml:./codecov.xml
      - name: Upload full coverage to Codecov
        if: ${{ matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./codecov.xml
          flags: unittests
          name: codecov-umbrella
          codecov_yml_path: ./codecov.yml
          fail_ci_if_error: true
          verbose: true
